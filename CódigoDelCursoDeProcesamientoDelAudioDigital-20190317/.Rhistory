lines(t,sig3,col='blue');
lines(t,sig1,col='black',lwd=3);
legend(.5,0.5,legend=c('sig1','sig1+sig2','sig2'),text.col=c('red','blue','black'));
par( mfrow=c(2,2) );
t <- seq(0,1,1/8000);
sig1 <- sin(2*pi*5*t);
sig2 <- 0.5*sin(2*pi*1000*t);
sig3 <- sig1+sig2;
plot(0,0,'n',xlim=c(min(t),max(t)),xlab='t',ylab='',main='sig1=sin(2*pi*5*t)');
lines(t,sig1,col='black',lwd=3);
plot(0,0,'n',xlim=c(min(t),max(t)),xlab='t',ylab='',main='sig2=0.5*sin(2*pi*1000*t)');
lines(t,sig2,col='red',lwd=.5);
plot(0,0,'n',xlim=c(min(t),max(t)),ylim=c(min(sig3),max(sig3)),xlab='t',ylab='',main='sig3=sin(2*pi*5*t)+sin(2*pi*1000*t)');
lines(t,sig3,col='blue');
plot(0,0,'n',xlim=c(min(t),0.75),ylim=c(min(sig3),max(sig3)),xlab='t',ylab='');
lines(t,sig2,col='red');
lines(t,sig3,col='blue');
lines(t,sig1,col='black',lwd=3);
legend(.5,0.5,legend=c('sig1','sig1+sig2','sig2'),text.col=c('red','blue','black'));
par( mfrow=c(2,2) );
t <- seq(0,1,1/8000);
sig1 <- sin(2*pi*5*t);
sig2 <- 0.5*sin(2*pi*1000*t);
sig3 <- sig1+sig2;
plot(0,0,'n',xlim=c(min(t),max(t)),xlab='t',ylab='',main='sig1=sin(2*pi*5*t)');
lines(t,sig1,col='black',lwd=3);
plot(0,0,'n',xlim=c(min(t),max(t)),xlab='t',ylab='',main='sig2=0.5*sin(2*pi*1000*t)');
lines(t,sig2,col='red',lwd=.5);
plot(0,0,'n',xlim=c(min(t),max(t)),ylim=c(min(sig3),max(sig3)),xlab='t',ylab='',main='sig3=sig1+sig2');
lines(t,sig3,col='blue');
plot(0,0,'n',xlim=c(min(t),0.75),ylim=c(min(sig3),max(sig3)),xlab='t',ylab='');
lines(t,sig2,col='red');
lines(t,sig3,col='blue');
lines(t,sig1,col='black',lwd=3);
legend(.5,0.5,legend=c('sig1','sig1+sig2','sig2'),text.col=c('red','blue','black'));
Fs = 220;
T = 1/Fs;
t = seq(0,1,T);
A4 <- sin(2*pi*440*7);
plot(t,A4);
T
t
length(t)
length(A4)
Fs = 220;
T = 1/Fs;
t = seq(0,1,T);
A4 <- sin(2*pi*440*t);
plot(t,A4);
Fs = 220;
T = 1/Fs;
t = seq(0,1,T);
A4 <- sin(2*pi*440*t,'l');
Fs = 220;
T = 1/Fs;
t = seq(0,1,T);
A4 <- sin(2*pi*440*t);
plot(t,A4,'l');
Fs = 220;
T = 1/Fs;
t = seq(0,1,T);
A4 <- sin(2*pi*440*t);
plot(t,A4,'l',xlab='t');
Fs = 220;
T = 1/Fs;
t = seq(0,1,T);
A4 <- sin(2*pi*440*t);
plot(t,A4,'l',xlab='t');
# El audio almacenado en la variable (en formato Wave) lo guardamos en la carpeta
# temporal llamada "www" en un fichero de tipo ".wav"
savewav(A4, filename="www/A4.wav")
help(savewav)
synth(f=220)
synth(f=220,d=2)
help(synth)
synth(f=220,d=1,signal=A4)
synth(f=220,d=1,cf=440,signal=A4)
synth(f=220,d=1,cf=440)
A4<-synth(f=220,d=1,cf=440)
A4
Fs = 220;
T = 1/Fs;
t = seq(0,1,T);
#A4 <- sin(2*pi*440*t);
A4<-synth(f=220,d=1,cf=440);
plot(t,A4,'l',xlab='t');
length(A4)
length(t)
Fs = 220;
T = 1/Fs;
t = seq(1/Fs,1,T);
#A4 <- sin(2*pi*440*t);
A4<-synth(f=220,d=1,cf=440);
plot(t,A4,'l',xlab='t');
# El audio almacenado en la variable (en formato Wave) lo guardamos en la carpeta
# temporal llamada "www" en un fichero de tipo ".wav"
savewav(A4, filename="www/A4.wav")
plot(t,A4,'l',xlab='t');
A4
plot(t,A4,'l',xlab='t');
Fs = 220;
T = 1/Fs;
t = seq(1/Fs,1,T);
#A4 <- sin(2*pi*440*t);
A4<-synth(f=880,d=1,cf=440);
plot(t,A4,'l',xlab='t');
Fs = 880;
T = 1/Fs;
t = seq(1/Fs,1,T);
#A4 <- sin(2*pi*440*t);
A4<-synth(f=Fs,d=1,cf=440);
plot(t,A4,'l',xlab='t');
# El audio almacenado en la variable (en formato Wave) lo guardamos en la carpeta
# temporal llamada "www" en un fichero de tipo ".wav"
savewav(A4, filename="www/A4.wav")
A4
a<-synth(f=8000,d=2,cf=2000,plot=FALSE)
a
aa
a.wav
#### Variable global para la creacion de una ventana grafica
### Instalacion de los paquetes R necesarios
paquetes <- c("fftw", "rgl", "rpanel", "tcltk2")
if (length(setdiff(paquetes, rownames(installed.packages()))) > 0) {
install.packages(paquetes, repos="http://cran.at.r-project.org/")
}
paquetes <- c("ggplot2", "gridExtra", "tuneR", "signal",
"seewave", "reshape", "reshape2", "pracma",
"GeneCycle", "waved", "RColorBrewer", "phonTools", "monitoR", "soundgen",
"shiny", "kableExtra", "rmarkdown", "knitr",
"knitcitations")
if (length(setdiff(paquetes, rownames(installed.packages()))) > 0) {
install.packages(setdiff(paquetes, rownames(installed.packages())), dependencies=TRUE,
repos="http://cran.at.r-project.org/")
}
options(defaultPackages=c(getOption("defaultPackages"), paquetes))
knitr::include_graphics("images/botonKnit.jpg")
knitr::include_graphics("images/chunk.jpg")
summary(cars)
summary(cars)
knitr::opts_chunk$set(echo = TRUE, fig.align='center', out.width = '80%')
library("shiny")
library("tuneR")
library("seewave")
library("kableExtra")
library("dplyr")
# El audio almacenado en la variable (en formato Wave) lo guardamos en la carpeta
# temporal llamada "www" en un fichero de tipo ".wav"
savewav(variable, filename="www/<nombre Audio>.wav")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE, fig.align='center', out.width = '80%')
library("shiny")
library("tuneR")
library("seewave")
library("kableExtra")
library("dplyr")
# El audio almacenado en la variable (en formato Wave) lo guardamos en la carpeta
# temporal llamada "www" en un fichero de tipo ".wav"
savewav(variable, filename="www/<nombre Audio>.wav")
# Intervalo de tiempo de 0s a 1s con un incremento de 0.01s
t <- seq(0, 1, 0.01)
# Figura de la onda coseno
plot(t, cos(2*pi*t), type = 'l', xlab= "Tiempo(s)", ylab = "Amplitud")
# Intervalo de tiempo de 0s a 3s con un incremento de 1/fs
t <- seq(0, 3, by = 1/1000)
# Primera onda coseno de frecuencia 1Hz, amplitud = 1, fase = 0 radianes
a1 <- 1
f1 <- 1
fase1 <- 0
o1 <- a1 * cos(2*pi*f1*t+fase1)
# Segunda onda coseno de frecuencia 2Hz, amplitud = 2, fase = pi radianes
a2 <- 2
f2 <- 2
fase2 <- pi
o2 <- a2 * sin(2*pi*f2*t+fase2)
# Suma de las dos ondas coseno
o12 <- o1 + o2
# Figura de las ondas
op<-par(mfrow=c(3,1))
plot(t, o1,  type = 'l', main = "onda coseno", xlab= "Tiempo(s)", ylab = "Amplitud")
plot(t, o2,  type = 'l', main = "onda seno", xlab= "Tiempo(s)", ylab = "Amplitud")
plot(t, o12, type = 'l', main = "onda coseno+seno", xlab= "Tiempo(s)", ylab = "Amplitud")
par(op)
# Frecuencia de muestreo
fs <- 16000
# Duracion de la nota
duracion <- 2.5
# Frecuencia fundamental de la nota middle C
frecuencia = 262
# La nota middleC: Salida en formato "Wave"
middleC <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Oimos la nota
savewav(middleC, filename="www/middleC.wav")
tags$audio(src = "www/middleC.wav", type = "audio/wav", autostart="false", controls = NA)
# Frecuencia de muestreo
fs <- 16000
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Frecuencia de muestreo
fs <- 16000
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Oimos la nota
savewav(middleC, filename="www/middleC.wav")
tags$audio(src = "www/middleC.wav", type = "audio/wav", autostart="false", controls = NA)
# Oimos el audio mediante el objeto del paquete "shiny"
tags$audio(src = "audio/<nombre Audio>.wav", type = "audio/wav", autostart="false", controls = NA)
getwd()
ls()
setwd('~')
setwd('Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/')
getwd()
getd()
getwd()
setwd('ficheros HTML/www/')
getd()
getwd()
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www'
p2d
c(p2d,'A4.wav')
paste(p2d,"A4.wav")
c(p2d,"A4.wav")
paste(p2d,"A4.wav",sep = '')
paste(p2d,"A4.wav",sep = '/')
# Frecuencia de muestreo
fs <- 16000
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(middleC, filename=paste(p2d,"A4.wav",sep = '/'))
tags$audio(src = paste(p2d,"A4.wav",sep = '/'), type = "audio/wav", autostart="false", controls = NA)
# Frecuencia de muestreo
fs <- 16000
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(middleC, filename=paste(p2d,"A4.wav",sep = '/'))
#tags$audio(src = paste(p2d,"A4.wav",sep = '/'), type = "audio/wav", autostart="false", controls = NA)
paste(p2d,"A4.wav",sep = '/')
paste(p2d,"A4.wav",sep = '')
# Frecuencia de muestreo
fs <- 16000
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(middleC, filename=paste(p2d,"A4.wav",sep = ''))
tags$audio(src = paste(p2d,"A4.wav",sep = ''), type = "audio/wav", autostart="false", controls = NA)
paste(p2d,"A4.wav",sep = '')
setwd(p2d)
getwd()
# Frecuencia de muestreo
fs <- 220
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(middleC, filename=paste(p2d,"A4.wav",sep = ''))
tags$audio(src = paste(p2d,"A4.wav",sep = ''), type = "audio/wav", autostart="false", controls = NA)
# Frecuencia de muestreo
fs <- 220
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(middleC, filename=paste(p2d,"A4.wav",sep = ''))
tags$audio(src = paste(p2d,"A4.wav",sep = ''), type = "audio/wav", autostart="false", controls = NA)
# Frecuencia de muestreo
fs <- 16000
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(middleC, filename=paste(p2d,"A4.wav",sep = ''))
tags$audio(src = paste(p2d,"A4.wav",sep = ''), type = "audio/wav", autostart="false", controls = NA)
# Frecuencia de muestreo
fs <- 220
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(middleC, filename=paste(p2d,"A4.wav",sep = ''))
tags$audio(src = paste(p2d,"A4.wav",sep = ''), type = "audio/wav", autostart="false", controls = NA)
# Oimos el audio mediante el objeto del paquete "shiny"
tags$audio(src = "audio/<nombre Audio>.wav", type = "audio/wav", autostart="false", controls = NA)
getwd()
setwd('~/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros Rstudio/audio/')
setwd('~/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros Rstudio/')
getwd()
# Oimos el audio mediante el objeto del paquete "shiny"
tags$audio(src = "audio/23976-01_short.wav", type = "audio/wav", autostart="false", controls = NA)
# Oimos el audio mediante el objeto del paquete "shiny"
tags$audio(src = "audio/23976-01_short.wav", type = "audio/wav", autostart="false", controls = NA)
# Oimos el audio mediante el objeto del paquete "shiny"
tags$audio(src = "audio/23976-01_short.wav", type = "audio/wav", autostart="false", controls = NA)
install.packages("pastecs")
getwd()
setwd('~/Downloads/')
setwd('~/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/')
getwd()
t <- seq(0,2,.02);
C = c('red','green','black','blue')
A <- 1:4
plot(0,0,'n',xlim=c(t[1],t[length(t)]+.5),xlab='t',ylab='cos(2piAt)');
for (curIter in A){
lines(t,cos(2*pi*A[curIter]*t),'l',col=C[curIter]);
};
legend(2,0.5,legend=c('A=1','A=2','A=3','A=4'),text.col=C);
par( mfrow=c(2,2) );
t <- seq(0,1,1/8000);
sig1 <- sin(2*pi*5*t);
sig2 <- 0.5*sin(2*pi*1000*t);
sig3 <- sig1+sig2;
plot(0,0,'n',xlim=c(min(t),max(t)),xlab='t',ylab='',main='sig1=sin(2*pi*5*t)');
lines(t,sig1,col='black',lwd=3);
plot(0,0,'n',xlim=c(min(t),max(t)),xlab='t',ylab='',main='sig2=0.5*sin(2*pi*1000*t)');
lines(t,sig2,col='red',lwd=.5);
plot(0,0,'n',xlim=c(min(t),max(t)),ylim=c(min(sig3),max(sig3)),xlab='t',ylab='',main='sig3=sig1+sig2');
lines(t,sig3,col='blue');
plot(0,0,'n',xlim=c(min(t),0.75),ylim=c(min(sig3),max(sig3)),xlab='t',ylab='');
lines(t,sig2,col='red');
lines(t,sig3,col='blue');
lines(t,sig1,col='black',lwd=3);
legend(.5,0.5,legend=c('sig1','sig1+sig2','sig2'),text.col=c('red','blue','black'));
# Frecuencia de muestreo
fs <- 220
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(middleC)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(middleC)
# Por ejemplo, frecuencia de muestreo
middleC@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(middleC, filename=paste(p2d,"A4.wav",sep = ''))
tags$audio(src = paste(p2d,"A4.wav",sep = ''), type = "audio/wav", autostart="false", controls = NA)
# Frecuencia de muestreo
fs <- 16000
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(A4)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(A4)
# Por ejemplo, frecuencia de muestreo
A4@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(A4, filename=paste(p2d,"A4.wav",sep = ''))
tags$audio(src = paste(p2d,"A4.wav",sep = ''), type = "audio/wav", autostart="false", controls = NA)
# Frecuencia de muestreo
fs <- 220
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(A4)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(A4)
# Por ejemplo, frecuencia de muestreo
A4@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(A4, filename=paste(p2d,"A4.wav",sep = ''))
tags$audio(src = paste(p2d,"A4.wav",sep = ''), type = "audio/wav", autostart="false", controls = NA)
filename
filename<-paste(p2d,"A4.wav",sep = '')
filename
# Frecuencia de muestreo
fs <- 220
# Duracion de la nota
duracion <- 1
# Frecuencia fundamental de la nota middle C
frecuencia = 440
# La nota middleC: Salida en formato "Wave"
A4 <- synth(f=fs, d=duracion, cf=frecuencia, output="Wave")
# formato Wave (informacion)
print(A4)
# Para acceder a alguna propiedad de la senal de audio, podemos consultar:
str(A4)
# Por ejemplo, frecuencia de muestreo
A4@samp.rate
# Oimos la nota
p2d<-'/Users/froux/Downloads/C贸digo del curso de Procesamiento del audio digital-20190317/ficheros HTML/www/'
savewav(A4, filename=paste(p2d,"A4.wav",sep = ''))
filename<-paste(p2d,"A4.wav",sep = '')
tags$audio(src =filename , type = "audio/wav", autostart="false", controls = NA)
help(audio)
help(tags$audio)
getwd()
# Oimos el audio mediante el objeto del paquete "shiny"
tags$audio(src = "audio/23976-01_short.wav", type = "audio/wav", autostart="false", controls = NA)
# Oimos el audio mediante el objeto del paquete "shiny"
tags$audio(src = "audio/harmonics_1_to_10.mp3", type = "audio/mp3", autostart="false", controls = NA)
library("shiny")
library("shiny")
tags$audio(src = "www/<nombre Audio>.wav", type = "audio/wav", autostart="false", controls = NA)
audio(src=filename)
getwd()
setwd('~/Downloads/C贸digoDelCursoDeProcesamientoDelAudioDigital-20190317/')
getwd()
