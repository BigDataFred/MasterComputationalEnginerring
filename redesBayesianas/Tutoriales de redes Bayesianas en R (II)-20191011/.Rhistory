net_bn<-hc(car)
net_graphnel<-as(amat(net_bn),"graphNEL")
net_grain<-grain(net_graphnel,data=car)
summary(net_grain)
## ----manual_cration,prompt=TRUE,message=FALSE----------------------------
yn<-c("NO","SI")
s <- cptable(~S, values=c(50,50),levels=yn)
j <- cptable(~J, values=c(25,75),levels=yn)
c.sj <- cptable(~C+S+J, values=c(80,20,50,50,50,50,10,90),levels=yn)
a.sc <- cptable(~A|S:C, values=c(95,5,50,50,25,75,5,95),levels=yn)
plist<-compileCPT(list(s,j,c.sj,a.sc))
net.study<-grain(plist)
querygrain(net.study,nodes="A",type="marginal")
bn_mush<-hc(mushroom[,1:10])
mushroom
bn_mush<-hc(mushroom[,1:10])
setwd("/Users/froux/MasterIngeneriaComputacional2018/redesBayesianas/Data Sets-20191011/")
rm(list=ls())
load("UCI_car.Rdata")
load("UCI_mushroom.Rdata")
getwd()
rm(list=ls())
setwd("/Users/froux/MasterIngeneriaComputacional2018/redesBayesianas/Tutoriales de redes Bayesianas en R (II)-20191011/")
car<-read.arff("car.arff")
mushroom<-read.arff("mushroom.arff")
summary(car)
summary(mushroom)
net_bn<-hc(car)
net_graphnel<-as(amat(net_bn),"graphNEL")
net_grain<-grain(net_graphnel,data=car)
summary(net_grain)
yn<-c("NO","SI")
s <- cptable(~S, values=c(50,50),levels=yn)
j <- cptable(~J, values=c(25,75),levels=yn)
c.sj <- cptable(~C+S+J, values=c(80,20,50,50,50,50,10,90),levels=yn)
a.sc <- cptable(~A|S:C, values=c(95,5,50,50,25,75,5,95),levels=yn)
plist<-compileCPT(list(s,j,c.sj,a.sc))
net.study<-grain(plist)
querygrain(net.study,nodes="A",type="marginal")
bn_mush<-hc(mushroom[,1:10])
net_mush<-grain(as(amat(bn_mush),"graphNEL"),
data=mushroom[,1:10],smooth=1/dim(mushroom)[1])
plot(net_mush)
bn_mush<-hc(mushroom[,1:10])
querygrain(net.study,nodes="A",type="marginal")
bn_mush<-hc(mushroom[,1:10])
summary(mushroom)
getwd()
load("UCI_car.Rdata")
load("UCI_mushroom.Rdata")
summary(car)
summary(mushroom)
net_bn<-hc(car)
net_graphnel<-as(amat(net_bn),"graphNEL")
net_grain<-grain(net_graphnel,data=car)
summary(net_grain)
yn<-c("NO","SI")
s <- cptable(~S, values=c(50,50),levels=yn)
j <- cptable(~J, values=c(25,75),levels=yn)
c.sj <- cptable(~C+S+J, values=c(80,20,50,50,50,50,10,90),levels=yn)
a.sc <- cptable(~A|S:C, values=c(95,5,50,50,25,75,5,95),levels=yn)
plist<-compileCPT(list(s,j,c.sj,a.sc))
net.study<-grain(plist)
querygrain(net.study,nodes="A",type="marginal")
bn_mush<-hc(mushroom[,1:10])
net_mush<-grain(as(amat(bn_mush),"graphNEL"),
data=mushroom[,1:10],smooth=1/dim(mushroom)[1])
plot(net_mush)
net_mush_moral<-moralize(net_mush$dag)
net_mush_triang<-triangulate(net_mush_moral)
plot(net_mush_moral)
plot(net_mush_triang)
rip(net_mush_triang)
plot(rip(net_mush_triang))
net_mush_compiled<-compile(net_mush)
net_mush$isCompiled
net_mush_compiled$isCompiled
summary(net_mush_compiled)
net_mush_propagated<-propagate(net_mush_compiled)
net_mush$isPropagated
net_mush_propagated$isPropagated
summary(net_mush_propagated)
net_mush_propagated_ev<-setFinding(net_mush_propagated,nodes="BRUISES",states="t", propagate=F)
net_mush_propagated_ev<-setEvidence(net_mush_propagated_ev,nodes="GILL_COL",states="n", propagate=F)
net_mush_propagated_ev<-propagate(net_mush_propagated_ev)
querygrain(net_mush_propagated,nodes="EDIBILITY",type="marginal")
querygrain(net_mush_propagated_ev,nodes="EDIBILITY",type="marginal")
net_mush_propagated_ev2<-retractEvidence(net_mush_propagated_ev,nodes=c("BRUISES","GILL_COL"), propagate=F)
net_mush_propagated_ev2<-setEvidence(net_mush_propagated_ev2,nodes=c("CAP_COL","CAP_SHAPE"),states=c("w","b"), propagate=T)
querygrain(net_mush_propagated_ev,nodes="EDIBILITY",type="marginal")
querygrain(net_mush_propagated_ev2,nodes="EDIBILITY",type="marginal")
querygrain(net.study,nodes="A",type="marginal")
set.seed(666)
samp<-simulate(net.study,nsim=10)
summary(samp$A)/10
querygrain(net.study,nodes="A",type="marginal")
aprox_marginal<-function(net,node,nsamples){
samp<-simulate(net,nsim=nsamples)
summary(samp[,node])/nsamples
}
querygrain(net_mush_propagated,nodes="cap-surface",type="marginal")
querygrain(net_mush_propagated,nodes="cap-surface",type="marginal")
aprox_marginal(net_mush,"cap-surface",10)
aprox_marginal(net_mush,"cap-surface",10)
aprox_marginal(net_mush,"cap-surface",10)
aprox_marginal(net_mush,"cap-surface",1000)
querygrain(net_mush_propagated,nodes="cap-surface",type="marginal")
aprox_marginal(net_mush,"cap-surface",10)
net_mush
net_mush$details
aprox_marginal(net_mush,"cap-surface",10)
aprox_marginal(net_mush,"CAP-SURFACE",10)
querygrain(net_mush_propagated,nodes="cap-surface",type="marginal")
querygrain(net_mush_propagated,nodes="CAP_SURF",type="marginal")
querygrain(net_mush_propagated,nodes="CAP_SURF",type="marginal")
aprox_marginal(net_mush,"CAP_SURF",10)
aprox_marginal(net_mush,"CAP_SURF",10)
aprox_marginal(net_mush,"CAP_SURF",10)
aprox_marginal(net_mush,"CAP_SURF",1000)
## ----bias_var_marginal_aprox,prompt=TRUE,message=FALSE,fig.path="./figures/",fig.keep='all',fig.show='hide',cache=TRUE,tidy=FALSE----
df<-data.frame()
node<-"GILL_SIZE"
marg_exacta<-querygrain(net_mush,nodes=node,type="marginal")[[1]][1]
for (i in seq(10,210,20)){
aux<-vector()
for (rep in 1:10){
aux<-c(aux,aprox_marginal(net_mush,node,i)[1])
}
df<-rbind(df,data.frame(size=i,min=min(aux),max=max(aux)))
}
ggplot(df,aes(x=size,ymin=min,ymax=max)) +
geom_ribbon(fill="slategray1") +
geom_line(aes(y=min),col="darkgray",size=1.5) +
geom_line(aes(y=max),col="darkgray",col="darkgray",size=1.5) +
geom_abline(intercept=marg_exacta,slope=0) +
labs(x="No. de muestras",y="Envolvente de las estimaciones") +
annotate("text", x=25,y=marg_exacta+0.01,label="Valor exacto")
source('~/MasterIngeneriaComputacional2018/redesBayesianas/Tutoriales de redes Bayesianas en R (II)-20191011/3_inferencia_en_redes_Bayesianas.R')
source('~/MasterIngeneriaComputacional2018/redesBayesianas/Tutoriales de redes Bayesianas en R (II)-20191011/3_inferencia_en_redes_Bayesianas.R')
plot()
## ---- Ejerciciosprompt=TRUE,message=FALSE,fig.keep='all',fig.show='true',cache=TRUE,tidy=FALSE----
plot(1,1)
samp<-simulate(net.study,nsim=10)
samp<-simulate(net.study,nsim=10)
summary(samp$A)/10
aprox_marginal(net.study,"A",10)
aprox_marginal(net.study,"A",10)
aprox_marginal(net.study,"A",10)
aprox_marginal(net.study,"A",10)
aprox_marginal(net.study,"A",10)
aprox_marginal(net.study,"A",10)
aprox_marginal(net.study,"A",10)
aprox_marginal(net.study,"A",10)
aprox_marginal(net.study,"A",5000)
querygrain(net.study,nodes="A",type="marginal")
aprox_marginal(net.study,"A",5000)
aprox_marginal(net.study,"A",5000)
querygrain(net.study,nodes="A",type="marginal")
querygrain(net.study,nodes="A",type="marginal")
querygrain(net.study,nodes="A",type="marginal")[1]
querygrain(net.study,nodes="A",type="marginal")$SI
querygrain(net.study,nodes="A",type="marginal")$A
querygrain(net.study,nodes="A",type="marginal")$A[1]
querygrain(net.study,nodes="A",type="marginal")$A[2]
querygrain(net.study,nodes="A",type="marginal")$A[2]$SI
querygrain(net.study,nodes="A",type="marginal")$A$SI
querygrain(net.study,nodes="A",type="marginal")$A[2]
querygrain(net.study,nodes="A",type="marginal")$A[2][1]
querygrain(net.study,nodes="A",type="marginal")$A[2][2]
querygrain(net.study,nodes="A",type="marginal")$A[2][3]
querygrain(net.study,nodes="A",type="marginal")$A[2][1]
querygrain(net.study,nodes="A",type="marginal")$A
querygrain(net.study,nodes="A",type="marginal")$A[1]
querygrain(net.study,nodes="A",type="marginal")$A[1,1]
querygrain(net.study,nodes="A",type="marginal")$A[2]
querygrain(net.study,nodes="A",type="marginal")$A[2]$SI
querygrain(net.study,nodes="A",type="marginal")$A[2]
tmp<-querygrain(net.study,nodes="A",type="marginal")$A[2]
tmp
tmp[1]
tmp[2]
tmp["SI"]
seq(10,5000,500)
seq(10,5000,250)
seq(10,5000,350)
seq(10,5000,300)
seq(10,5000,325)
seq(10,5000,355)
seq(10,5000,350)
seq(10,5100,350)
seq(10,5200,350)
seq(10,5250,350)
seq(10,5250,300)
mapply( aprox_marginal, n, reps)
reps<-5
n <- seq(10,5250,300)
mapply( aprox_marginal, n, reps)
for (r in 1:reps){
print((r))
}
aprox_marginal(net.study,"A",10)
tmp<-aprox_marginal(net.study,"A",10)
tmp
tmp{2}
tmp{[2]
tmp[2]
tmp[2]$SI
tmp$SI
tmp
typeof(tmp)
tmp
tmp[2]
tmp[2,1]
tmp[2][1]
tmp[2][2]
tmp
tm[2]
tmp[2]
numeric(tmp[2])
unlist(tmp)
unlist(tmp["SI"])
tmp["SI"]
tmp["SI"][1]
tmp["SI"][2]
tmp["SI"][1]
for (r in 1:reps){
for (ix in 1:length(n)){
aprox_marginal(net.study,"A",n[ix])
}
}
for (r in 1:reps){
for (ix in 1:length(n)){
print( aprox_marginal(net.study,"A",n[ix]) )
}
}
samp<-simulate(net.study,nsim=10)
summary(samp$A)/10
samp<-simulate(net.study,nsim=10)
summary(samp$A)
samp<-simulate(net.study,nsim=10)
summary(samp$A)[1]
samp<-simulate(net.study,nsim=10)
summary(samp$A)[2]
samp<-simulate(net.study,nsim=10)
(samp$A)
samp<-simulate(net.study,nsim=10)
levels(summary(samp$A))
summary(samp$A)/10
names(summary(samp$A)/10)
with(as.list(summary(samp$A)/10))
with(as.list(summary(samp$A)/10,"SI"))
names(summary(samp$A)/10)
names(summary(samp$A)/10)[2]
summary(samp$A)/10[names(summary(samp$A)/10)[2]]
summary(samp$A)/10
~names(summary(samp$A)/10)
summary(samp$A)/10
summary(samp$A)/10$SI
summary(samp$A)$SI
summary(samp$A)
summary(samp$A)$SI.value
summary(samp$A)
as.numeric(summary(samp$A))
for (r in 1:reps){
for (ix in 1:length(n)){
as.numeric( aprox_marginal(net.study,"A",n[ix]) )
}
}
for (r in 1:reps){
for (ix in 1:length(n)){
print( as.numeric( aprox_marginal(net.study,"A",n[ix]) ) )
}
}
for (r in 1:reps){
for (ix in 1:length(n)){
print( as.numeric( aprox_marginal(net.study,"A",n[ix]) )[2] )
}
}
for (r in 1:reps){
for (ix in 1:length(n)){
pS <- as.numeric( aprox_marginal(net.study,"A",n[ix]) )[2]
}
}
pS <-matrix(nrow=reps,ncol=length(n))
for (r in 1:reps){
for (ix in 1:length(n)){
pS[r,ix] <- as.numeric( aprox_marginal(net.study,"A",n[ix]) )[2]
}
}
pS
mean(pS,1)
mean(pS,2)
mean(pS)
?mean
rowMeans(pS)
colMeans(pS)
plot(n,colMeans(pS))
plot(n,colMeans(pS),type='l')
querygrain(net.study,nodes="A",type="marginal")
as.numeric(querygrain(net.study,nodes="A",type="marginal"))
querygrain(net.study,nodes="A",type="marginal")
querygrain(net.study,nodes="A",type="marginal")["SI"]
querygrain(net.study,nodes="A",type="marginal")[1]
querygrain(net.study,nodes="A",type="marginal")$SI
querygrain(net.study,nodes="A",type="marginal")[1]
as.numeric(querygrain(net.study,nodes="A",type="marginal")[1])
querygrain(net.study,nodes="A",type="marginal")[1]
querygrain(net.study,nodes="A",type="marginal")[1]$SI
querygrain(net.study,nodes="A",type="marginal")[1][1]
querygrain(net.study,nodes="A",type="marginal")[1][1][1]
names(querygrain(net.study,nodes="A",type="marginal"))
names(querygrain(net.study,nodes="A",type="marginal")$A
querygrain(net.study,nodes="A",type="marginal")$A
querygrain(net.study,nodes="A",type="marginal")$A[1]
querygrain(net.study,nodes="A",type="marginal")$A[2]
as.numeric(querygrain(net.study,nodes="A",type="marginal")$A)
as.numeric(querygrain(net.study,nodes="A",type="marginal")$A)[2]
plot(n,colMeans(err),type="l")
pST <- as.numeric(querygrain(net.study,nodes="A",type="marginal")$A)[2]
err <- pST-pS
plot(n,colMeans(err),type="l")
err
dev.off()
min(err)
plot(n,err,type='l')
aprox_marginal<-function(net,node,nsamples){
samp<-simulate(net,nsim=nsamples)
summary(samp[,node])/nsamples
}
reps<-5
n <- seq(10,5250,300)
pS <-matrix(nrow=reps,ncol=length(n))
for (r in 1:reps){
for (ix in 1:length(n)){
pS[r,ix] <- as.numeric( aprox_marginal(net.study,"A",n[ix]) )[2]
}
}
pST <- as.numeric(querygrain(net.study,nodes="A",type="marginal")$A)[2]
err <- pST-pS
plot(n,err,type='l')
n
plot(n,colMeans(err),type='l')
err <- abs(pST-pS)
plot(n,colMeans(err),type='l')
plot(n,colMeans(err),type='both',col=2)
plot(n,colMeans(err),type='both',col=2,xlab="No. de muestras",ylab="Error medio")
dev.off()
plot(n,colMeans(err),type='both',col=2,xlab="No. de muestras",ylab="Error medio")
net.study
net
net.study
#5.2 Problema. A la hora de estimar probabilidades marginales disponiendo de evidencia, en algunos casos es
#evidencia puede ser usada directamente (por ejemplo, cuando sabemos el valor de una variable que no tiene padres).
#Sin embargo, en el caso general no es posible hacer esto. En nuestro ejemplo de red, si sabemos que
#C = y no podemos simplemente muestrear S, fijar la probabilidad condicionada P(AjS;C = y) y muestrear A.
#Comprobar que esta manera de calcular P(AjC = y) no es correcta.
querygrain(net.study,nodes="A",type="marginal")
net.study_ev<-setFinding(net.study,nodes="C",states="y", propagate=F)
summary(net.study_ev)
querygrain(net.study_ev,nodes="A",type="marginal")
net.study
querygrain(net.study_ev,nodes="S",type="marginal")
net.study_ev<-setFinding(net.study,nodes="C",states="y", propagate=F)
net.study_ev<-propagate(net.study_ev)
querygrain(net.study_ev,nodes="S",type="marginal")
#5.2 Problema. A la hora de estimar probabilidades marginales disponiendo de evidencia, en algunos casos es
#evidencia puede ser usada directamente (por ejemplo, cuando sabemos el valor de una variable que no tiene padres).
#Sin embargo, en el caso general no es posible hacer esto. En nuestro ejemplo de red, si sabemos que
#C = y no podemos simplemente muestrear S, fijar la probabilidad condicionada P(AjS;C = y) y muestrear A.
#Comprobar que esta manera de calcular P(AjC = y) no es correcta.
querygrain(net.study,nodes="S",type="marginal")
yn<-c("NO","SI")
s <- cptable(~S, values=c(50,50),levels=yn)
j <- cptable(~J, values=c(25,75),levels=yn)
c.sj <- cptable(~C+S+J, values=c(80,20,50,50,50,50,10,90),levels=yn)
a.sc <- cptable(~A|S:C, values=c(95,5,50,50,25,75,5,95),levels=yn)
plist<-compileCPT(list(s,j,c.sj,a.sc))
net.study<-grain(plist)
s
net.study
net.study
c.sj
yn
net.study$C
setFinding(net.study,nodes="C",states="y", propagate=F)
setFinding(net.study,nodes="C",states="SI", propagate=F)
net.study_ev<-setFinding(net.study,nodes="C",states="SI", propagate=F)
net.study_ev<-propagate(net.study_ev)
querygrain(net.study_ev,nodes="A",type="marginal")
?cptable
plist
plist$S
plist$J
plist$C
plist$A
plist$A
plist$w
plist$S
plist$A
plist$C
net.study_ev<-setFinding(net.study,nodes="C",states="SI", propagate=F)
net.study_ev<-propagate(net.study_ev)
net.study_ev
querygrain(net.study_ev,nodes="A",type="marginal")
net.study
aprox_marginal(net.study,"A",n[ix])
aprox_marginal(net.study,"A",10)
aprox_marginal(net.study,"S",10)
aprox_marginal(net.study,"C",10)
aprox_marginal(net.study,"J",10)
aprox_marginal(net.study,"J|A",10)
aprox_marginal(net.study,"J",1)
aprox_marginal(net.study,"J",2)
aprox_marginal(net.study,"J",3)
simulate(net,nsim=nsamples)
simulate(net.stdy,nsim=1)
simulate(net.study,nsim=1)
simulate(net.study,nsim=2)
simulate(net.study,nsim=3)
simulate(net.study,nsim=4)
simulate(net.study,nsim=4)
summary(simulate(net.study,nsim=4))
summary(simulate(net.study,nsim=4))[A]
summary(simulate(net.study,nsim=4))["A"]
summary(simulate(net.study,nsim=4))[4]
summary(simulate(net.study,nsim=4))$A
summary(simulate(net.study,nsim=4)[,"A"])
max(summary(simulate(net.study,nsim=4)[,"A"]))
summary(simulate(net.study,nsim=4)[,"A"])
simulate(net.study,nsim=4)
simulate(net.study)
which(simulate(net.study) == "SI")
any(simulate(net.study) == "SI")
(simulate(net.study) == "SI")
(simulate(net.study)[1] == "SI")
simulate(net.study)
simulate(net.study,nsim=4)
net_ev<-setFinding(net.study,nodes="A",states="SI", propagate=T)
net_ev
simulate(net_ev,4)
simulate(net_ev,4)[,"S"]
simulate(net_ev,4)[,1]
simulate(net_ev,4)
s<-simulate(net_ev,4)
summary(s)
summary(s[,S])
summary(s[,"S"])
summary(s[,"S"])
as.numeric(summary(s[,"S"]))
as.numeric(summary(s[,"S"]))[2]
as.numeric(summary(s[,"S"]))[2]/sum(as.numeric(summary(s[,"S"]))[2])
as.numeric(summary(s[,"S"]))[2]/sum(as.numeric(summary(s[,"S"])))
simulate(net_ev)
simulate(net_ev,10)
simulate(net_ev)
simulate(net_ev)["A"]
as.numeric(simulate(net_ev)["A"])
as.st(simulate(net_ev)["A"])
simulate(net_ev)["A"]=="SI"
as.logical(simulate(net_ev)["A"]=="SI")
simulate(net_ev)
summary(simulate(net_ev))
as.numeric(summary(simulate(net_ev)))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev))
summary(simulate(net_ev)["S"])
as.numeric(summary(simulate(net_ev)["S"]))
simulate(net_ev)
s<-simulate(net_ev)
summary(s)
summary(s[,"S"])
as.numeric(summary(s[,"S"]))
as.numeric(summary(s))
summary(s)
summary(s[,S])
s
summary(s[,"S"])
summary(s[,c("S","J")])
as.numeric(summary(s[,c("S","J")]))
S<-c(0,1,0,1,1,0)
S
sum(S)
get_conditional_marginal <- function(net, node, evidence_nodes, evidences, numSamples){
cnt <-0
S <- vector(length=numSamples)
for ( ix in 1:length(S) ){
net_ev<-setFinding(net,nodes=evidence_nodes[ix],states=evidences[ix], propagate=F)
net_ev<-propagate(net_ev)
s <- simulate(net_ev)
chck <- as.logical( simulate(net_ev)[evidence_nodes]==evidences )
if (chck==TRUE){
S[ix] <-summary(s[,"S"])[2]
}
}
Px<-sum(S)/numSamples
return(Px)
}
get_conditional_marginal(net.study,"A","C","SI",10)
get_conditional_marginal(net.study,"A","C","SI",100)
get_conditional_marginal(net.study,"A","C","SI",1000)
exit()
exit()
