k <- k+1
}
}
formatLSFR <- function(s){
tmp<-NULL
idx = 1:dim(s)[2]
for (ix in dim(s)[2]:1){tmp<-c(tmp,s[,ix])}
return(tmp)
}
################
cD <- c(1,0,0,1)
sInit <- c(0,0,1,1)
s <- LSFR(cD,sInit)
p <- dim(s)[1]-1
print(p)
print(s)
print(formatLSFR(s))
which(c1==1)
which(c2==1)
which(c3==1)
which(c4==1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, 15 )
print(out)
print(out)
chck<-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
print(all(out==c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)))
# 2 Cifrado de Vernam
source("flujo/vernam.R")
m <- c(0, 1, 1, 0, 1, 0, 0, 1)
clave1 <- c(1, 1, 1, 1, 0)
c1 <- vernam(m, clave1)
clave2 <- c(1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0)
c2 <- vernam(m, clave2)
print( c2 )
mdec<-vernam(c2, clave2)
print(mdec)
# 3 Registros de desplazamiento (LSFRs)
LFSR <- function(c,s0,n){
out<-NULL
L <- length(s0)
out <- rbind(out,s0)
k<-2
s <- s0
ix<-1
while (TRUE){
tmp<-vector(length=L)
tmp[1]<- sum(out[k-1,which(c==1)])%%2
tmp[2:L] <- out[k-1,1:L-1]
s <- c(s,tmp[1])
out <- rbind(out,tmp)
if (all(out[k,] ==s0)){
return(s[1:n])
}
k<-k+1
}
}
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, 15 )
print(out)
print(all(out==c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)))
chck <- c(0,0,1,1,1,1,0,1,0,1,1,0,0,1,0)
c2 <- c(1,0,0,1)
s0<-c(0,0,1,1)
out<-LFSR( c2, s0, length(chck) )
print(all(out==chck))
chck-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
print(all(out==chck))
chck-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
print(all(out==chck))
out
chck
chck-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
print(all(out==chck))
chck
chck
c
chck
rm(list=ls())
# 3 Registros de desplazamiento (LSFRs)
LFSR <- function(cD,s0,n){
out<-NULL
L <- length(s0)
out <- rbind(out,s0)
k<-2
s <- s0
ix<-1
while (TRUE){
tmp<-vector(length=L)
tmp[1]<- sum(out[k-1,which(cD==1)])%%2
tmp[2:L] <- out[k-1,1:L-1]
s <- c(s,tmp[1])
out <- rbind(out,tmp)
if (all(out[k,] ==s0)){
return(s[1:n])
}
k<-k+1
}
}
chck-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
chck<-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
print(all(out==chck))
chck <- c(0,0,1,1,1,1,0,1,0,1,1,0,0,1,0)
c2 <- c(1,0,0,1)
s0<-c(0,0,1,1)
out<-LFSR( c2, s0, length(chck) )
print(all(out==chck))
chck<-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
print(all(out==chck))
chck <- c(0,0,1,1,1,1,0,1,0,1,1,0,0,1,0)
c2 <- c(1,0,0,1)
s0<-c(0,0,1,1)
out<-LFSR( c2, s0, length(chck) )
print(all(out==chck))
chck <- c(0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0)
c3 <- c(0,0,1,0,1)
s0<-c(0,0,1,1,0)
out<-LFSR( c3, s0, length(chck) )
print(all(out==chck))
chck <- c(0,0,1,1,0,0,1)
c4 <- c(1,1,1)
s0<-c(0,0,1)
out<-LFSR( c4, s0, length(chck) )
print(all(out==chck))
LSFR <- function(cD,s){
ix <- which(cD ==1 )
L <- length(s)
out <- rbind(NULL,s)
k<-2
while (TRUE){
tmp<-vector(length = L)
tmp[1] <- (sum( out[k-1,ix] ))%%2
tmp[2:L] <- out[k-1,1:(L-1)]
out <- rbind(out,tmp)
if (all(out[k,] == out[1,])){
out <- out[1:k,]
return(out)
}
k <- k+1
}
}
formatLSFR <- function(s){
tmp<-NULL
idx = 1:dim(s)[2]
for (ix in dim(s)[2]:1){tmp<-c(tmp,s[,ix])}
return(tmp)
}
################
cD <- c(1,0,0,1)
sInit <- c(0,0,1,1)
s <- LSFR(cD,sInit)
p <- dim(s)[1]-1
print(p)
print(s)
print(formatLSFR(s))
s0
c(s0,s0)
tmp<-c(s0,s0)
length(tmp)
CD <-c(1,1,1)
which(CD==1)
length(tmp)-which(CD==1)
tmp[length(tmp)-which(CD==1)]
sum(tmp[length(tmp)-which(CD==1)])
sum(tmp[length(tmp)-which(CD==1)])%%2
0%%1
0%%2
1%%2
3%%2
2%%2
1%%2
2%%2
1%%2
3%%2
c4 <- c(1,1,1)
s0<-c(0,0,1)
s0
c4
which(c4==1)
s0(which(c4==1))
s0[which(c4==1)]
sum(s0[which(c4==1)])
sum(s0[which(c4==1)])%%2
s<-c(s0,sum(s0[which(c4==1)])%%2)
s
s<-c(s,sum(s[length(s)-which(c4==1)])%%2)
s
s0
cD
which(c4==1)
s0[which(c4==1)]
s<-s0
c(s,sum(s[length(s)-which(c4==1)]))
s
length(s)-which(c4==1)
c(s,sum(s[which(c4==1)]))
c(s,sum(s[which(c4==1)])%%2)
s<-c(s,sum(s[which(c4==1)])%%2)
s<-c(s,sum(s[length(s)-which(c4==1)])%%2)
s
length(s)-which(c4==1)
s<-c(s,sum(s[length(s)-which(c4==1)])%%2)
s<-c(s,sum(s[length(s)-which(c4==1)])%%2)
s<-c(s,sum(s[length(s)-which(c4==1)])%%2)
s<-c(s,sum(s[length(s)-which(c4==1)])%%2)
s
# 3 Registros de desplazamiento (LSFRs)
LFSR <- function(cD,s0,n){
out<-NULL
L <- length(s0)
out <- rbind(out,s0)
k<-2
s <- s0
cIx <- which(cD==1)
while (TRUE){
tmp<-vector(length=L)
tmp[1]<- sum(s[])%%2
tmp[2:L] <- out[k-1,1:L-1]
s <- c(s,tmp[1])
out <- rbind(out,tmp)
if (all(out[k,] ==s0)){
return(s[1:n])
}
k<-k+1
}
}
chck<-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
print(all(out==chck))
chck <- c(0,0,1,1,1,1,0,1,0,1,1,0,0,1,0)
c2 <- c(1,0,0,1)
s0<-c(0,0,1,1)
out<-LFSR( c2, s0, length(chck) )
print(all(out==chck))
chck <- c(0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0)
c3 <- c(0,0,1,0,1)
s0<-c(0,0,1,1,0)
out<-LFSR( c3, s0, length(chck) )
print(all(out==chck))
chck <- c(0,0,1,1,0,0,1)
c4 <- c(1,1,1)
s0<-c(0,0,1)
out<-LFSR( c4, s0, length(chck) )
print(all(out==chck))
# 3 Registros de desplazamiento (LSFRs)
LFSR <- function(cD,s0,n){
out<-NULL
L <- length(s0)
out <- rbind(out,s0)
k<-2
s <- s0
cIx <- which(cD==1)
while (TRUE){
tmp<-vector(length=L)
tmp[1]<- sum(s[])%%2
tmp[2:L] <- out[k-1,1:L-1]
s <- c(s,tmp[1])
out <- rbind(out,tmp)
if (all(out[k,] ==s0)){
return(s[1:n])
}
k<-k+1
}
}
chck<-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
print(all(out==chck))
# 3 Registros de desplazamiento (LSFRs)
LFSR <- function(cD,s0,n){
out<-NULL
L <- length(s0)
out <- rbind(out,s0)
k<-2
s <- s0
cIx <- which(cD==1)
while (TRUE){
tmp<-vector(length=L)
tmp[1]<- sum(out[k-1,cIx])%%2
tmp[2:L] <- out[k-1,1:L-1]
s <- c(s,tmp[1])
out <- rbind(out,tmp)
if (all(out[k,] ==s0)){
return(s[1:n])
}
k<-k+1
}
}
chck<-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
print(all(out==chck))
chck <- c(0,0,1,1,1,1,0,1,0,1,1,0,0,1,0)
c2 <- c(1,0,0,1)
s0<-c(0,0,1,1)
out<-LFSR( c2, s0, length(chck) )
print(all(out==chck))
chck <- c(0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0)
c3 <- c(0,0,1,0,1)
s0<-c(0,0,1,1,0)
out<-LFSR( c3, s0, length(chck) )
print(all(out==chck))
chck <- c(0,0,1,1,0,0,1)
c4 <- c(1,1,1)
s0<-c(0,0,1)
out<-LFSR( c4, s0, length(chck) )
print(all(out==chck))
c4 <- c(1,1,1)
s0<-c(0,0,1)
c4
s0<-c(0,0,1)
s<-s0
s
s
j<-length(s)+1
j
L<-length(c4)
L
j
s[L]
s[1:L]
s[j[-1:L]]
j-[1:L]
seq(1:L)
j-seq(1:L)
sum(s[j-seq(1:L)])
sum(s[j-seq(1:L)])%%2
s <- c(s,sum(s[j-seq(1:L)])%%2)
s
j
j<+j+1
j<-j+1
j
s <- c(s,sum(s[j-seq(1:L)])%%2)
s
j<-j+1
s <- c(s,sum(s[j-seq(1:L)])%%2)
s
j<-j+1
s <- c(s,sum(s[j-seq(1:L)])%%2)
s
which(c4==1)
seq(1:L)
j-which(c4==1)
# 3 Registros de desplazamiento (LSFRs)
LFSR <- function(cD,s0,n){
s <- s0
L <-length(s0)
out <- NULL
out <- rbind(out,s0)
cIx <- which(cD==1)
k<-2
j<-L+1
while (TRUE){
tmp<-vector(length=L)
tmp[1]<- sum(out[k-1,cIx])%%2
tmp[2:L]<-out[k-1,1:L-1]
out <- rbind(out,tmp)
s <- c(s,sum(s[j-cIx])%%2)
if (all(out[k,] ==s0)){
return(s[1:n])
}
k<-k+1
j<-j+1
}
}
chck<-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
print(all(out==chck))
chck <- c(0,0,1,1,1,1,0,1,0,1,1,0,0,1,0)
c2 <- c(1,0,0,1)
s0<-c(0,0,1,1)
out<-LFSR( c2, s0, length(chck) )
print(all(out==chck))
chck <- c(0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0)
c3 <- c(0,0,1,0,1)
s0<-c(0,0,1,1,0)
out<-LFSR( c3, s0, length(chck) )
print(all(out==chck))
chck <- c(0,0,1,1,0,0,1)
c4 <- c(1,1,1)
s0<-c(0,0,1)
out<-LFSR( c4, s0, length(chck) )
print(all(out==chck))
source('~/MasterIngeneriaComputacional2018/criptografia/semana3/Semana3Practica_FREDERIC_ROUX.R')
# 3 Registros de desplazamiento (LSFRs)
LFSR <- function(cD,s0,n){
s <- s0
L <-length(s0)
out <- NULL
out <- rbind(out,s0)
cIx <- which(cD==1)
k<-2
j<-L+1
while (TRUE){
tmp<-vector(length=L)
tmp[1]<- sum(out[k-1,cIx])%%2
tmp[2:L]<-out[k-1,1:L-1]
out <- rbind(out,tmp)
s <- c(s,sum(s[j-cIx])%%2)
if (all(out[k,] ==s0)){
return(s[1:n])
}
k<-k+1
j<-j+1
}
}
chck<-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
print(all(out==chck))
chck <- c(0,0,1,1,1,1,0,1,0,1,1,0,0,1,0)
c2 <- c(1,0,0,1)
s0<-c(0,0,1,1)
out<-LFSR( c2, s0, length(chck) )
print(all(out==chck))
chck <- c(0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0)
c3 <- c(0,0,1,0,1)
s0<-c(0,0,1,1,0)
out<-LFSR( c3, s0, length(chck) )
print(all(out==chck))
chck <- c(0,0,1,1,0,0,1)
c4 <- c(1,1,1)
s0<-c(0,0,1)
out<-LFSR( c4, s0, length(chck) )
print(all(out==chck))
source('~/MasterIngeneriaComputacional2018/criptografia/semana3/Semana3Practica_FREDERIC_ROUX.R')
# 3 Registros de desplazamiento (LSFRs)
LFSR <- function(cD,s0,n){
s <- s0
L <-length(s0)
out <- NULL
out <- rbind(out,s0)
cIx <- which(cD==1)
k<-2
while (TRUE){
tmp<-vector(length=L)
tmp[1]<- sum(out[j-1,cIx])%%2
tmp[2:L]<-out[k-1,1:L-1]
out <- rbind(out,tmp)
s <- c(s,sum(s[j-cIx])%%2)
if (all(out[k,] ==s0)){
return(s[1:n])
}
k<-k+1
j<-j+1
}
}
chck<-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
print(out)
# 3 Registros de desplazamiento (LSFRs)
LFSR <- function(cD,s0,n){
s <- s0
L <-length(s0)
out <- NULL
out <- rbind(out,s0)
cIx <- which(cD==1)
k<-2
while (TRUE){
tmp<-vector(length=L)
tmp[1]<- sum(out[j-1,cIx])%%2
tmp[2:L]<-out[k-1,1:L-1]
out <- rbind(out,tmp)
s <- c(s,sum(s[j-cIx])%%2)
if (all(out[k,] ==s0)){
return(s[1:n])
}
k<-k+1
j<-j+1
}
}
chck<-c(0,1,1,0,0,1,0,0,0,1,1,1,1,0,1)
c1 <- c(1,0,0,1)
s0<-c(0,1,1,0)
out<-LFSR( c1, s0, length(chck) )
